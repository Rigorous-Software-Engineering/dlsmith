import fp
import intern
import souffle_lib
import souffle_types
typedef TVariable = IString
typedef TFunctor = IString
relation Rfn(_v:TVariable, _f:TFunctor)
relation Rarg(_v:TVariable, _p:Tnumber, _a:TVariable)
relation RnumParam(_v:TVariable, _p:Tnumber)
relation Rinject(_a:TVariable)
Rinject(_a) :- Rarg(_a, _, _).
output relation Requal(_v1:TVariable, _v2:TVariable)
output relation RequalParam(_v1:TVariable, _v2:TVariable, _p:Tnumber)
output relation RnextEqualParam(_v1:TVariable, _v2:TVariable, _p:Tnumber)
Requal(_v1, _v2) :- Rfn(_v1, _f), Rfn(_v2, _f), RnumParam(_v1, (0)), RnumParam(_v2, (0)).
Requal(_v1, _v2) :- Rfn(_v1, _f), Rfn(_v2, _f), RnumParam(_v1, _p), RnumParam(_v2, _p), RequalParam(_v1, _v2, _p).
RequalParam(_v1, _v2, (1)) :- Requal(_a1, _a2), Rarg(_v1, (1), _a1), Rarg(_v2, (1), _a2).
RnextEqualParam(_v1, _v2, (_prev + (1))) :- RequalParam(_v1, _v2, _prev).
RequalParam(_v1, _v2, _next) :- Requal(_a1, _a2), Rarg(_v1, _next, _a1), Rarg(_v2, _next, _a2), RnextEqualParam(_v1, _v2, _next).
Rfn(string_intern("x"), string_intern("f")).
Rarg(string_intern("x"), (1), string_intern("a1")).
Rarg(string_intern("x"), (2), string_intern("a2")).
RnumParam(string_intern("x"), (2)).
Rfn(string_intern("y"), string_intern("f")).
Rarg(string_intern("y"), (1), string_intern("b1")).
Rarg(string_intern("y"), (2), string_intern("b2")).
RnumParam(string_intern("y"), (2)).
Rfn(string_intern("a1"), string_intern("g")).
RnumParam(string_intern("a1"), (0)).
Rfn(string_intern("a2"), string_intern("h")).
RnumParam(string_intern("a2"), (0)).
Rfn(string_intern("b1"), string_intern("g")).
RnumParam(string_intern("b1"), (0)).
Rfn(string_intern("b2"), string_intern("h")).
RnumParam(string_intern("b2"), (0)).
