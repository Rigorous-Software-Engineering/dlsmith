import fp
import intern
import souffle_lib
import souffle_types
typedef TAirport = IString
typedef THour = Tnumber
typedef TRoute = Option<(TAirport, TAirport, THour, THour)>
relation Rflight(_r:TRoute)
Rflight(Some{(string_intern("Sydney"), string_intern("Melbourne"), (8), (2))}).
Rflight(Some{(string_intern("Sydney"), string_intern("Melbourne"), (20), (2))}).
Rflight(Some{(string_intern("Sydney"), string_intern("Singapore"), (6), (10))}).
Rflight(Some{(string_intern("Melbourne"), string_intern("Auckland"), (14), (4))}).
Rflight(Some{(string_intern("Sydney"), string_intern("Auckland"), (12), (3))}).
Rflight(Some{(string_intern("Singapore"), string_intern("Tokyo"), (21), (12))}).
Rflight(Some{(string_intern("Singapore"), string_intern("Dubai"), (10), (11))}).
Rflight(Some{(string_intern("Singapore"), string_intern("London"), (14), (14))}).
Rflight(Some{(string_intern("Dubai"), string_intern("London"), (5), (6))}).
Rflight(Some{(string_intern("London"), string_intern("New York"), (17), (15))}).
Rflight(Some{(string_intern("London"), string_intern("New York"), (5), (15))}).
Rflight(Some{(string_intern("London"), string_intern("Oslo"), (15), (3))}).
Rflight(Some{(string_intern("London"), string_intern("Paris"), (10), (3))}).
Rflight(Some{(string_intern("London"), string_intern("Reykjavik"), (8), (5))}).
Rflight(Some{(string_intern("Oslo"), string_intern("Reykjavik"), (9), (4))}).
Rflight(Some{(string_intern("Oslo"), string_intern("Reykjavik"), (21), (4))}).
Rflight(Some{(string_intern("Los Angeles"), string_intern("New York"), (14), (5))}).
Rflight(Some{(string_intern("Tokyo"), string_intern("Los Angeles"), (4), (14))}).
Rflight(Some{(string_intern("Singapore"), string_intern("Los Angeles"), (9), (14))}).
Rflight(Some{(string_intern("Singapore"), string_intern("Los Angeles"), (17), (14))}).
Rflight(Some{(string_intern("Tokyo"), string_intern("Vancouver"), (12), (10))}).
Rflight(Some{(string_intern("Singapore"), string_intern("Vancouver"), (18), (14))}).
Rflight(Some{(string_intern("Los Angeles"), string_intern("Vancouver"), (5), (5))}).
relation Rtravel(_s:TAirport, _t:THour)
input relation Rtravel_shadow(_s:TAirport, _t:THour)
Rtravel(_s, _t) :- Rtravel_shadow(_s, _t).
output relation Rconnection(_s:TAirport, _d:TAirport, _t:THour, _h:THour)
Rconnection(_s, _d, (((_t + _h)) % (24)), ((((((24) + _t) - _tx)) % (24)) + _h)) :- Rtravel(_s, _tx), Rflight(Some{(_s, _d, _t, _h)}).
Rconnection(_s, _d, (((_tx + _h)) % (24)), ((_hx + (((((24) + _t) - _tx)) % (24))) + _h)) :- Rconnection(_s, _x, _tx, _hx), Rflight(Some{(_x, _d, _t, _h)}).
output relation Rtotal_time(_d:TAirport, _h:THour)
Rtotal_time(_d, _h) :- Rconnection(_s, _d, _, _), Ragg(_s, _d, _h).
relation Ragg(_s:TAirport, _d:TAirport, _h:THour)
Ragg(_s, _d, _h) :- tpl in Rconnection(_s, _d, _, _x), var _h = ((tpl), _x).group_by((_s, _d)).souffle_group_min().

relation Rinject(_a:TRoute)
Rinject(_a) :- Rconnection(_b, _c, _d, _e), Rflight(_a).
