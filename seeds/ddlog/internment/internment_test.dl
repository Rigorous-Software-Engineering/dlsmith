input relation IInternedString(ix: istring)
relation StaticInternedString(ix: istring)

StaticInternedString(default()).
StaticInternedString(intern("static foo")).
StaticInternedString(i"ifoo").
StaticInternedString(i[|ibar|]).
StaticInternedString(i"ifoo${25}").
StaticInternedString(i"ifoo${25}" "!").
StaticInternedString(i$[|ibar${2+2}|]).

relation AllInternedString(ix: istring)
AllInternedString(ix) :- IInternedString(ix).
AllInternedString(ix) :- StaticInternedString(ix).

output relation OInternedString(x: string, ix: istring)

OInternedString(ival(s), s) :-
    AllInternedString(s).

OInternedString(s1.ival() ++ " " ++ s2.ival(), intern(s1.ival() ++ " " ++ s2.ival())) :-
    AllInternedString(s1),
    AllInternedString(s2).

typedef IUnion = Tag1{f1: bool}
               | Tag2{f2: u32, f3: string}

typedef IStruct = IStruct {
    u: Intern<IUnion>,
    t: Intern<(s32, double)>,
    x: bigint
}

typedef Struct = Struct {
    u: IUnion,
    t: (s32, double),
    x: bigint
}

function istruct2struct(i: IStruct): Struct {
    Struct{ival(i.u), ival(i.t), i.x}
}

output relation Projections(inp: Struct, p: string)


